apply plugin: 'com.android.application'
apply from: '../androidUtils/ide/funcs.gradle'

//def SIGNING_INFO_PATH = "${projectDir}/../../../secret/android/signing.common.properties"

def FLAVOR_CHANNEL = 'channel'
def FLAVOR_DEVICE = 'device'

def developChannels = ['dev', 'qa']
def debugOnlyChannels = ['dev']
def originChannels = developChannels + 'prd'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders += [CommonOrientation: "portrait"]
    }
    /*
    signingConfigs {
        release {
            File sf = new File(SIGNING_INFO_PATH)
            if (sf.exists()) {
                String dir = sf.parent
                Properties props = new Properties()
                props.load(new FileInputStream(SIGNING_INFO_PATH))
                storeFile file("${dir}/${props.getProperty('signing.release.keyStore')}")
                storePassword props.getProperty('signing.release.storePassword')
                keyAlias props.getProperty('signing.release.keyAlias')
                keyPassword props.getProperty('signing.release.keyPassword')
            }
        }
    }
    */
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //signingConfig signingConfigs.release
        }
    }
    /*
    compileOptions {
        sourceCompatibility rootProject.ext.android.java_version
        targetCompatibility rootProject.ext.android.java_version
    }
    */
    flavorDimensions FLAVOR_CHANNEL, FLAVOR_DEVICE
    productFlavors {
        dev {
            dimension FLAVOR_CHANNEL
            applicationIdSuffix "."+name
        }
        qa {
            dimension FLAVOR_CHANNEL
            applicationIdSuffix "."+name
        }
        prd {
            dimension FLAVOR_CHANNEL
        }
        common {
            dimension FLAVOR_DEVICE
        }
    }
    productFlavors.all { flavor ->
        flavor.manifestPlaceholders.put(flavor.dimension, name)
        if (sourceSets.findByName('origin')?.name != null && flavor.dimension == FLAVOR_CHANNEL) {
            if (originChannels.contains(name)) {
                sourceSets."${name}" {
                    java.srcDirs += 'src/origin/java'
                    res.srcDirs += 'src/origin/res'
                }
            }
            if (sourceSets.findByName('prod')?.name != null && !developChannels.contains(name)) {
                sourceSets."${name}" {
                    java.srcDirs += 'src/prod/java'
                    res.srcDirs += 'src/prod/res'
                }
            }
        }
    }
    variantFilter { variant ->
        def flavors = variant.getFlavors()
        if (!flavors.isEmpty()) {
            def channel = flavors.get(0).name
            def buildTypeName = variant.buildType.name
            variant.setIgnore(buildTypeName == buildTypes.release.name && debugOnlyChannels.contains(channel))
        }
    }
    //processApkOutputs(rootProject.ext.android.apk_name_prefix)
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':JavaUtility')
    implementation project(':AndroidUtility')
    implementation project(':AndroidSupport')
    implementation rootProject.ext.dependencies['appcompatV7']
    implementation rootProject.ext.dependencies['butterknife']
    annotationProcessor rootProject.ext.dependencies['butterknife_annotation']
    testImplementation rootProject.ext.dependencies['junit']
    androidTestImplementation(rootProject.ext.dependencies['test_runner'])
    androidTestImplementation(rootProject.ext.dependencies['espresso'])
}
