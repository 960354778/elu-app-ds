apply plugin: 'com.android.application'
apply from: '../androidUtils/ide/funcs.gradle'

def FLAVOR_CHANNEL = 'channel'
def FLAVOR_DEVICE = 'device'

def developChannels = ['local', 'dev', 'qa', 'demo']
def debugOnlyChannels = ['local']
def originChannels = developChannels + 'prd'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders += [
                commonOrientation: "portrait",
                aliPushAppKey: rootProject.ext.config.aliPushAppKey,
                aliPushAppSecret: rootProject.ext.config.aliPushAppSecret,
                buildDate: rootProject.ext.config.buildDate,
                buildDateEpoch: rootProject.ext.config.buildDateEpoch,
                buildRevision: rootProject.ext.config.buildRevision
        ]
        ndk {
            abiFilter 'armeabi'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    signingConfigs {
        release {
            File sf = resolvePath(rootProject.projectDir.toString(), normalizePath(rootProject.ext.config.releaseKeyConfigPath)).toFile()
            print("loading signing info from: \"${sf}\"(existing: ${sf.exists()})...\n")
            if (sf.exists()) {
                Properties props = new Properties()
                props.load(new FileInputStream(sf))
                storeFile resolvePath(sf.parent, normalizePath(props.getProperty('signing.release.keyStore'))).toFile()
                keyAlias props.getProperty('signing.release.keyAlias')
                def pStore = props.getProperty('signing.release.storePassword')
                if (pStore) {
                    storePassword pStore
                }
                def pKey = props.getProperty('signing.release.keyPassword')
                if (pKey) {
                    keyPassword pKey
                }
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility rootProject.ext.android.java_version
        targetCompatibility rootProject.ext.android.java_version
    }
    flavorDimensions FLAVOR_CHANNEL, FLAVOR_DEVICE
    productFlavors {
        local {
            dimension FLAVOR_CHANNEL
        }
        dev {
            dimension FLAVOR_CHANNEL
        }
        qa {
            dimension FLAVOR_CHANNEL
        }
        demo {
            dimension FLAVOR_CHANNEL
        }
        prd {
            dimension FLAVOR_CHANNEL
        }
        common {
            dimension FLAVOR_DEVICE
        }
    }
    productFlavors.all { flavor ->
        flavor.manifestPlaceholders.put(flavor.dimension, name)
        if (flavor.dimension == FLAVOR_CHANNEL) {
            if (originChannels.contains(name)) {
                sourceSets."${name}" {
                    java.srcDirs += 'src/origin/java'
                    res.srcDirs += 'src/origin/res'
                }
            }
            def appName = '智云'
            if (developChannels.contains(name)) {
                appName += "(${name.toUpperCase()})"
                flavor.applicationIdSuffix = ".${name}"
            } else {
                sourceSets."${name}" {
                    java.srcDirs += 'src/prod/java'
                    res.srcDirs += 'src/prod/res'
                }
            }
            flavor.resValue('string', 'app_name', appName)
        }
    }
    variantFilter { variant ->
        def flavors = variant.getFlavors()
        if (!flavors.isEmpty()) {
            def channel = flavors.get(0).name
            def buildTypeName = variant.buildType.name
            variant.setIgnore(buildTypeName == buildTypes.release.name && debugOnlyChannels.contains(channel))
        }
    }
    processApkOutputs(rootProject.ext.android.apk_name_prefix, normalizePath(rootProject.ext.config.outputDir))
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':JavaUtility')
    implementation project(':AndroidUtility')
    implementation project(':AndroidSupport')
    implementation rootProject.ext.dependencies['appcompatV7']
    implementation rootProject.ext.dependencies['butterknife']
    implementation rootProject.ext.dependencies['sqlcipher']
    implementation rootProject.ext.dependencies['recyclerview']
    implementation rootProject.ext.dependencies['cardview']
    implementation rootProject.ext.dependencies['retrofit']
    implementation rootProject.ext.dependencies['rxandroid']
    implementation rootProject.ext.dependencies['rxadapter']
    implementation rootProject.ext.dependencies['rxjava']
    implementation rootProject.ext.dependencies['converterGson']
    implementation rootProject.ext.dependencies['pageview']
    implementation rootProject.ext.dependencies['logInter']
    implementation rootProject.ext.dependencies['ultra']
    annotationProcessor rootProject.ext.dependencies['butterknife_annotation']
    testImplementation rootProject.ext.dependencies['junit']
    androidTestImplementation(rootProject.ext.dependencies['test_runner'])
    androidTestImplementation(rootProject.ext.dependencies['espresso'])
}
